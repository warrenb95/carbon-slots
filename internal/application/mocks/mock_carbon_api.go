// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/warrenb95/carbon-slots/internal/ports/outbound"
	"sync"
	"time"
)

// Ensure, that CarbonIntensityPortMock does implement outbound.CarbonIntensityPort.
// If this is not the case, regenerate this file with moq.
var _ outbound.CarbonIntensityPort = &CarbonIntensityPortMock{}

// CarbonIntensityPortMock is a mock implementation of outbound.CarbonIntensityPort.
//
//	func TestSomethingThatUsesCarbonIntensityPort(t *testing.T) {
//
//		// make and configure a mocked outbound.CarbonIntensityPort
//		mockedCarbonIntensityPort := &CarbonIntensityPortMock{
//			GetCarbonIntensityFunc: func(ctx context.Context, from time.Time, to time.Time) ([]outbound.CarbonForecastPeriod, error) {
//				panic("mock out the GetCarbonIntensity method")
//			},
//		}
//
//		// use mockedCarbonIntensityPort in code that requires outbound.CarbonIntensityPort
//		// and then make assertions.
//
//	}
type CarbonIntensityPortMock struct {
	// GetCarbonIntensityFunc mocks the GetCarbonIntensity method.
	GetCarbonIntensityFunc func(ctx context.Context, from time.Time, to time.Time) ([]outbound.CarbonForecastPeriod, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCarbonIntensity holds details about calls to the GetCarbonIntensity method.
		GetCarbonIntensity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// From is the from argument value.
			From time.Time
			// To is the to argument value.
			To time.Time
		}
	}
	lockGetCarbonIntensity sync.RWMutex
}

// GetCarbonIntensity calls GetCarbonIntensityFunc.
func (mock *CarbonIntensityPortMock) GetCarbonIntensity(ctx context.Context, from time.Time, to time.Time) ([]outbound.CarbonForecastPeriod, error) {
	if mock.GetCarbonIntensityFunc == nil {
		panic("CarbonIntensityPortMock.GetCarbonIntensityFunc: method is nil but CarbonIntensityPort.GetCarbonIntensity was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		From time.Time
		To   time.Time
	}{
		Ctx:  ctx,
		From: from,
		To:   to,
	}
	mock.lockGetCarbonIntensity.Lock()
	mock.calls.GetCarbonIntensity = append(mock.calls.GetCarbonIntensity, callInfo)
	mock.lockGetCarbonIntensity.Unlock()
	return mock.GetCarbonIntensityFunc(ctx, from, to)
}

// GetCarbonIntensityCalls gets all the calls that were made to GetCarbonIntensity.
// Check the length with:
//
//	len(mockedCarbonIntensityPort.GetCarbonIntensityCalls())
func (mock *CarbonIntensityPortMock) GetCarbonIntensityCalls() []struct {
	Ctx  context.Context
	From time.Time
	To   time.Time
} {
	var calls []struct {
		Ctx  context.Context
		From time.Time
		To   time.Time
	}
	mock.lockGetCarbonIntensity.RLock()
	calls = mock.calls.GetCarbonIntensity
	mock.lockGetCarbonIntensity.RUnlock()
	return calls
}
